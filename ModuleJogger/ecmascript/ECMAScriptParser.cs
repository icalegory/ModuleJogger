//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ECMAScript.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class ECMAScriptParser : Parser
{
    private CommonTokenStream _input;

	public const int
		RegularExpressionLiteral=1, LineTerminator=2, OpenBracket=3, CloseBracket=4, 
		OpenParen=5, CloseParen=6, OpenBrace=7, CloseBrace=8, SemiColon=9, Comma=10, 
		Assign=11, QuestionMark=12, Colon=13, Dot=14, PlusPlus=15, MinusMinus=16, 
		Plus=17, Minus=18, BitNot=19, Not=20, Multiply=21, Divide=22, Modulus=23, 
		RightShiftArithmetic=24, LeftShiftArithmetic=25, RightShiftLogical=26, 
		LessThan=27, MoreThan=28, LessThanEquals=29, GreaterThanEquals=30, Equals=31, 
		NotEquals=32, IdentityEquals=33, IdentityNotEquals=34, BitAnd=35, BitXOr=36, 
		BitOr=37, And=38, Or=39, MultiplyAssign=40, DivideAssign=41, ModulusAssign=42, 
		PlusAssign=43, MinusAssign=44, LeftShiftArithmeticAssign=45, RightShiftArithmeticAssign=46, 
		RightShiftLogicalAssign=47, BitAndAssign=48, BitXorAssign=49, BitOrAssign=50, 
		NullLiteral=51, BooleanLiteral=52, DecimalLiteral=53, HexIntegerLiteral=54, 
		OctalIntegerLiteral=55, Break=56, Do=57, Instanceof=58, Typeof=59, Case=60, 
		Else=61, New=62, Var=63, Catch=64, Finally=65, Return=66, Void=67, Continue=68, 
		For=69, Switch=70, While=71, Debugger=72, Function=73, This=74, With=75, 
		Default=76, If=77, Throw=78, Delete=79, In=80, Try=81, Class=82, Enum=83, 
		Extends=84, Super=85, Const=86, Export=87, Import=88, Implements=89, Let=90, 
		Private=91, Public=92, Interface=93, Package=94, Protected=95, Static=96, 
		Yield=97, Identifier=98, StringLiteral=99, WhiteSpaces=100, MultiLineComment=101, 
		SingleLineComment=102, UnexpectedCharacter=103;
	public const int
		RULE_program = 0, RULE_sourceElements = 1, RULE_sourceElement = 2, RULE_statement = 3, 
		RULE_block = 4, RULE_statementList = 5, RULE_variableStatement = 6, RULE_variableDeclarationList = 7, 
		RULE_variableDeclaration = 8, RULE_initialiser = 9, RULE_emptyStatement = 10, 
		RULE_expressionStatement = 11, RULE_ifStatement = 12, RULE_iterationStatement = 13, 
		RULE_continueStatement = 14, RULE_breakStatement = 15, RULE_returnStatement = 16, 
		RULE_withStatement = 17, RULE_switchStatement = 18, RULE_caseBlock = 19, 
		RULE_caseClauses = 20, RULE_caseClause = 21, RULE_defaultClause = 22, 
		RULE_labelledStatement = 23, RULE_throwStatement = 24, RULE_tryStatement = 25, 
		RULE_catchProduction = 26, RULE_finallyProduction = 27, RULE_debuggerStatement = 28, 
		RULE_functionDeclaration = 29, RULE_formalParameterList = 30, RULE_functionBody = 31, 
		RULE_arrayLiteral = 32, RULE_elementList = 33, RULE_elision = 34, RULE_objectLiteral = 35, 
		RULE_propertyNameAndValueList = 36, RULE_propertyAssignment = 37, RULE_propertyName = 38, 
		RULE_propertySetParameterList = 39, RULE_arguments = 40, RULE_argumentList = 41, 
		RULE_expressionSequence = 42, RULE_singleExpression = 43, RULE_assignmentOperator = 44, 
		RULE_literal = 45, RULE_numericLiteral = 46, RULE_identifierName = 47, 
		RULE_reservedWord = 48, RULE_keyword = 49, RULE_futureReservedWord = 50, 
		RULE_getter = 51, RULE_setter = 52, RULE_eos = 53, RULE_eof = 54;
	public static readonly string[] ruleNames = {
		"program", "sourceElements", "sourceElement", "statement", "block", "statementList", 
		"variableStatement", "variableDeclarationList", "variableDeclaration", 
		"initialiser", "emptyStatement", "expressionStatement", "ifStatement", 
		"iterationStatement", "continueStatement", "breakStatement", "returnStatement", 
		"withStatement", "switchStatement", "caseBlock", "caseClauses", "caseClause", 
		"defaultClause", "labelledStatement", "throwStatement", "tryStatement", 
		"catchProduction", "finallyProduction", "debuggerStatement", "functionDeclaration", 
		"formalParameterList", "functionBody", "arrayLiteral", "elementList", 
		"elision", "objectLiteral", "propertyNameAndValueList", "propertyAssignment", 
		"propertyName", "propertySetParameterList", "arguments", "argumentList", 
		"expressionSequence", "singleExpression", "assignmentOperator", "literal", 
		"numericLiteral", "identifierName", "reservedWord", "keyword", "futureReservedWord", 
		"getter", "setter", "eos", "eof"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", 
		"'='", "'?'", "':'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
		"'*'", "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", 
		"'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", 
		"'^='", "'|='", "'null'", null, null, null, null, "'break'", "'do'", "'instanceof'", 
		"'typeof'", "'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", 
		"'return'", "'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
		"'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", 
		"'in'", "'try'", "'class'", "'enum'", "'extends'", "'super'", "'const'", 
		"'export'", "'import'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RegularExpressionLiteral", "LineTerminator", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "SemiColon", "Comma", 
		"Assign", "QuestionMark", "Colon", "Dot", "PlusPlus", "MinusMinus", "Plus", 
		"Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic", 
		"LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
		"BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", 
		"ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", 
		"BitXorAssign", "BitOrAssign", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "Break", "Do", "Instanceof", 
		"Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", "Return", 
		"Void", "Continue", "For", "Switch", "While", "Debugger", "Function", 
		"This", "With", "Default", "If", "Throw", "Delete", "In", "Try", "Class", 
		"Enum", "Extends", "Super", "Const", "Export", "Import", "Implements", 
		"Let", "Private", "Public", "Interface", "Package", "Protected", "Static", 
		"Yield", "Identifier", "StringLiteral", "WhiteSpaces", "MultiLineComment", 
		"SingleLineComment", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ECMAScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	  
	    ///<summary>Returns <c>true</c> iff on the current index of the parser's
	    ///token stream a token of the given <c>type</c> exists on the
	    ///<c>Hidden</c> channel.</summary>
	    ///<param name="type">the type of the token on the <c>Hidden</c> channel
	    ///to check.</param>
	    ///<returns><c>true</c> iff on the current index of the parser's
	    ///token stream a token of the given <c>type</c> exists on the
	    ///<c>Hidden</c> channel.</returns>
	    private bool here(int type) {

	        // Get the token ahead of the current index.
	        int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
	        IToken ahead = _input.Get(possibleIndexEosToken);

	        // Check if the token resides on the Hidden channel and if it's of the
	        // provided type.
	        return (ahead.Channel == Lexer.Hidden) && (ahead.Type == type);
	    }

	    ///<summary>Returns <c>true</c> iff on the current index of the parser's
	    ///token stream a token exists on the <c>Hidden</c> channel which
	    ///either is a line terminator, or is a multi line comment that
	    ///contains a line terminator.</summary>
	    ///<returns><c>true</c> iff on the current index of the parser's
	    ///token stream a token exists on the <c>Hidden</c> channel which
	    ///either is a line terminator, or is a multi line comment that
	    ///contains a line terminator.</returns>
	    private bool lineTerminatorAhead() {

	        // Get the token ahead of the current index.
	        int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
	        IToken ahead = _input.Get(possibleIndexEosToken);

	        if (ahead.Channel != Lexer.Hidden) {
	            // We're only interested in tokens on the Hidden channel.
	            return false;
	        }

	        if (ahead.Type == LineTerminator) {
	            // There is definitely a line terminator ahead.
	            return true;
	        }

	        if (ahead.Type == WhiteSpaces) {
	            // Get the token ahead of the current whitespaces.
	            possibleIndexEosToken = this.CurrentToken.TokenIndex - 2;
	            ahead = _input.Get(possibleIndexEosToken);
	        }

	        // Get the token's text and type.
	        string text = ahead.Text;
	        int type = ahead.Type;

	        // Check if the token is, or contains a line terminator.
	        return (type == MultiLineComment && (text.Contains("\r") || text.Contains("\n"))) ||
	                (type == LineTerminator);
	    }                                

	public ECMAScriptParser(ITokenStream input)
		: base(input)
	{
	    _input = (CommonTokenStream) input;
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ECMAScriptParser.Eof, 0); }
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 110; sourceElements();
				}
				break;
			}
			State = 113; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 115; sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sourceElement);
		try {
			State = 122;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 139;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; variableStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126; emptyStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 127; expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 128; ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 129; iterationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 130; continueStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 131; breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 132; returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 133; withStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 134; labelledStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 135; switchStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 136; throwStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 137; tryStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 138; debuggerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(OpenBrace);
			State = 143;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 142; statementList();
				}
				break;
			}
			State = 145; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 10, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 147; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(ECMAScriptParser.Var, 0); }
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(Var);
			State = 153; variableDeclarationList();
			State = 154; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; variableDeclaration();
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 157; Match(Comma);
					State = 158; variableDeclaration();
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public InitialiserContext initialiser() {
			return GetRuleContext<InitialiserContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(Identifier);
			State = 166;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 165; initialiser();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialiserContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialiser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterInitialiser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitInitialiser(this);
		}
	}

	[RuleVersion(0)]
	public InitialiserContext initialiser() {
		InitialiserContext _localctx = new InitialiserContext(Context, State);
		EnterRule(_localctx, 18, RULE_initialiser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(Assign);
			State = 169; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(ECMAScriptParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			if (!((_input.La(1) != OpenBrace) && (_input.La(1) != Function))) throw new FailedPredicateException(this, "(_input.La(1) != OpenBrace) && (_input.La(1) != Function)");
			State = 174; expressionSequence();
			State = 175; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(ECMAScriptParser.If, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(ECMAScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(If);
			State = 178; Match(OpenParen);
			State = 179; expressionSequence();
			State = 180; Match(CloseParen);
			State = 181; statement();
			State = 184;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 182; Match(Else);
				State = 183; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		public ITerminalNode Do() { return GetToken(ECMAScriptParser.Do, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode While() { return GetToken(ECMAScriptParser.While, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}
	public partial class ForVarStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(ECMAScriptParser.For, 0); }
		public ITerminalNode Var() { return GetToken(ECMAScriptParser.Var, 0); }
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForVarStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterForVarStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitForVarStatement(this);
		}
	}
	public partial class ForVarInStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(ECMAScriptParser.For, 0); }
		public ITerminalNode Var() { return GetToken(ECMAScriptParser.Var, 0); }
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode In() { return GetToken(ECMAScriptParser.In, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForVarInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterForVarInStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitForVarInStatement(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		public ITerminalNode While() { return GetToken(ECMAScriptParser.While, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(ECMAScriptParser.For, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(ECMAScriptParser.For, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode In() { return GetToken(ECMAScriptParser.In, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_iterationStatement);
		int _la;
		try {
			State = 247;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; Match(Do);
				State = 187; statement();
				State = 188; Match(While);
				State = 189; Match(OpenParen);
				State = 190; expressionSequence();
				State = 191; Match(CloseParen);
				State = 192; eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; Match(While);
				State = 195; Match(OpenParen);
				State = 196; expressionSequence();
				State = 197; Match(CloseParen);
				State = 198; statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 200; Match(For);
				State = 201; Match(OpenParen);
				State = 203;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << Typeof) | (1L << New))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Void - 67)) | (1L << (Function - 67)) | (1L << (This - 67)) | (1L << (Delete - 67)) | (1L << (Identifier - 67)) | (1L << (StringLiteral - 67)))) != 0)) {
					{
					State = 202; expressionSequence();
					}
				}

				State = 205; Match(SemiColon);
				State = 207;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << Typeof) | (1L << New))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Void - 67)) | (1L << (Function - 67)) | (1L << (This - 67)) | (1L << (Delete - 67)) | (1L << (Identifier - 67)) | (1L << (StringLiteral - 67)))) != 0)) {
					{
					State = 206; expressionSequence();
					}
				}

				State = 209; Match(SemiColon);
				State = 211;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << Typeof) | (1L << New))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Void - 67)) | (1L << (Function - 67)) | (1L << (This - 67)) | (1L << (Delete - 67)) | (1L << (Identifier - 67)) | (1L << (StringLiteral - 67)))) != 0)) {
					{
					State = 210; expressionSequence();
					}
				}

				State = 213; Match(CloseParen);
				State = 214; statement();
				}
				break;
			case 4:
				_localctx = new ForVarStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 215; Match(For);
				State = 216; Match(OpenParen);
				State = 217; Match(Var);
				State = 218; variableDeclarationList();
				State = 219; Match(SemiColon);
				State = 221;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << Typeof) | (1L << New))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Void - 67)) | (1L << (Function - 67)) | (1L << (This - 67)) | (1L << (Delete - 67)) | (1L << (Identifier - 67)) | (1L << (StringLiteral - 67)))) != 0)) {
					{
					State = 220; expressionSequence();
					}
				}

				State = 223; Match(SemiColon);
				State = 225;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << Typeof) | (1L << New))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Void - 67)) | (1L << (Function - 67)) | (1L << (This - 67)) | (1L << (Delete - 67)) | (1L << (Identifier - 67)) | (1L << (StringLiteral - 67)))) != 0)) {
					{
					State = 224; expressionSequence();
					}
				}

				State = 227; Match(CloseParen);
				State = 228; statement();
				}
				break;
			case 5:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 230; Match(For);
				State = 231; Match(OpenParen);
				State = 232; singleExpression(0);
				State = 233; Match(In);
				State = 234; expressionSequence();
				State = 235; Match(CloseParen);
				State = 236; statement();
				}
				break;
			case 6:
				_localctx = new ForVarInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 238; Match(For);
				State = 239; Match(OpenParen);
				State = 240; Match(Var);
				State = 241; variableDeclaration();
				State = 242; Match(In);
				State = 243; expressionSequence();
				State = 244; Match(CloseParen);
				State = 245; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(ECMAScriptParser.Continue, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(Continue);
			State = 251;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 250; Match(Identifier);
				}
				break;
			}
			State = 253; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(ECMAScriptParser.Break, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(Break);
			State = 257;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 256; Match(Identifier);
				}
				break;
			}
			State = 259; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(ECMAScriptParser.Return, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(Return);
			State = 263;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 262; expressionSequence();
				}
				break;
			}
			State = 265; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		public ITerminalNode With() { return GetToken(ECMAScriptParser.With, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(With);
			State = 268; Match(OpenParen);
			State = 269; expressionSequence();
			State = 270; Match(CloseParen);
			State = 271; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(ECMAScriptParser.Switch, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(Switch);
			State = 274; Match(OpenParen);
			State = 275; expressionSequence();
			State = 276; Match(CloseParen);
			State = 277; caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(OpenBrace);
			State = 281;
			_la = TokenStream.La(1);
			if (_la==Case) {
				{
				State = 280; caseClauses();
				}
			}

			State = 287;
			_la = TokenStream.La(1);
			if (_la==Default) {
				{
				State = 283; defaultClause();
				State = 285;
				_la = TokenStream.La(1);
				if (_la==Case) {
					{
					State = 284; caseClauses();
					}
				}

				}
			}

			State = 289; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 40, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 291; caseClause();
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(ECMAScriptParser.Case, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(Case);
			State = 297; expressionSequence();
			State = 298; Match(Colon);
			State = 300;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 299; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		public ITerminalNode Default() { return GetToken(ECMAScriptParser.Default, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(Default);
			State = 303; Match(Colon);
			State = 305;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 304; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(Identifier);
			State = 308; Match(Colon);
			State = 309; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(ECMAScriptParser.Throw, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(Throw);
			State = 312; expressionSequence();
			State = 313; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(ECMAScriptParser.Try, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_tryStatement);
		try {
			State = 328;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; Match(Try);
				State = 316; block();
				State = 317; catchProduction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; Match(Try);
				State = 320; block();
				State = 321; finallyProduction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 323; Match(Try);
				State = 324; block();
				State = 325; catchProduction();
				State = 326; finallyProduction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(ECMAScriptParser.Catch, 0); }
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 52, RULE_catchProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(Catch);
			State = 331; Match(OpenParen);
			State = 332; Match(Identifier);
			State = 333; Match(CloseParen);
			State = 334; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		public ITerminalNode Finally() { return GetToken(ECMAScriptParser.Finally, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 54, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(Finally);
			State = 337; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		public ITerminalNode Debugger() { return GetToken(ECMAScriptParser.Debugger, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(Debugger);
			State = 340; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(ECMAScriptParser.Function, 0); }
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(Function);
			State = 343; Match(Identifier);
			State = 344; Match(OpenParen);
			State = 346;
			_la = TokenStream.La(1);
			if (_la==Identifier) {
				{
				State = 345; formalParameterList();
				}
			}

			State = 348; Match(CloseParen);
			State = 349; Match(OpenBrace);
			State = 350; functionBody();
			State = 351; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(ECMAScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(ECMAScriptParser.Identifier, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 60, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(Identifier);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 354; Match(Comma);
				State = 355; Match(Identifier);
				}
				}
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 361; sourceElements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ElisionContext elision() {
			return GetRuleContext<ElisionContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(OpenBracket);
			State = 366;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 365; elementList();
				}
				break;
			}
			State = 369;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 368; Match(Comma);
				}
				break;
			}
			State = 372;
			_la = TokenStream.La(1);
			if (_la==Comma) {
				{
				State = 371; elision();
				}
			}

			State = 374; Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ElisionContext[] elision() {
			return GetRuleContexts<ElisionContext>();
		}
		public ElisionContext elision(int i) {
			return GetRuleContext<ElisionContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 66, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			_la = TokenStream.La(1);
			if (_la==Comma) {
				{
				State = 376; elision();
				}
			}

			State = 379; singleExpression(0);
			State = 387;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 380; Match(Comma);
					State = 382;
					_la = TokenStream.La(1);
					if (_la==Comma) {
						{
						State = 381; elision();
						}
					}

					State = 384; singleExpression(0);
					}
					} 
				}
				State = 389;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElisionContext : ParserRuleContext {
		public ElisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterElision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitElision(this);
		}
	}

	[RuleVersion(0)]
	public ElisionContext elision() {
		ElisionContext _localctx = new ElisionContext(Context, State);
		EnterRule(_localctx, 68, RULE_elision);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 390; Match(Comma);
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==Comma );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public PropertyNameAndValueListContext propertyNameAndValueList() {
			return GetRuleContext<PropertyNameAndValueListContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 70, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(OpenBrace);
			State = 397;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 396; propertyNameAndValueList();
				}
				break;
			}
			State = 400;
			_la = TokenStream.La(1);
			if (_la==Comma) {
				{
				State = 399; Match(Comma);
				}
			}

			State = 402; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameAndValueListContext : ParserRuleContext {
		public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		public PropertyNameAndValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyNameAndValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPropertyNameAndValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPropertyNameAndValueList(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameAndValueListContext propertyNameAndValueList() {
		PropertyNameAndValueListContext _localctx = new PropertyNameAndValueListContext(Context, State);
		EnterRule(_localctx, 72, RULE_propertyNameAndValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; propertyAssignment();
			State = 409;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 405; Match(Comma);
					State = 406; propertyAssignment();
					}
					} 
				}
				State = 411;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public PropertySetParameterListContext propertySetParameterList() {
			return GetRuleContext<PropertySetParameterListContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 74, RULE_propertyAssignment);
		try {
			State = 431;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 412; propertyName();
				State = 413; Match(Colon);
				State = 414; singleExpression(0);
				}
				break;
			case 2:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; getter();
				State = 417; Match(OpenParen);
				State = 418; Match(CloseParen);
				State = 419; Match(OpenBrace);
				State = 420; functionBody();
				State = 421; Match(CloseBrace);
				}
				break;
			case 3:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 423; setter();
				State = 424; Match(OpenParen);
				State = 425; propertySetParameterList();
				State = 426; Match(CloseParen);
				State = 427; Match(OpenBrace);
				State = 428; functionBody();
				State = 429; Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(ECMAScriptParser.StringLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 76, RULE_propertyName);
		try {
			State = 436;
			switch (TokenStream.La(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433; identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434; Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 435; numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetParameterListContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public PropertySetParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPropertySetParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPropertySetParameterList(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetParameterListContext propertySetParameterList() {
		PropertySetParameterListContext _localctx = new PropertySetParameterListContext(Context, State);
		EnterRule(_localctx, 78, RULE_propertySetParameterList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 80, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(OpenParen);
			State = 442;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << Typeof) | (1L << New))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Void - 67)) | (1L << (Function - 67)) | (1L << (This - 67)) | (1L << (Delete - 67)) | (1L << (Identifier - 67)) | (1L << (StringLiteral - 67)))) != 0)) {
				{
				State = 441; argumentList();
				}
			}

			State = 444; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 82, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; singleExpression(0);
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 447; Match(Comma);
				State = 448; singleExpression(0);
				}
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 84, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; singleExpression(0);
			State = 459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 455; Match(Comma);
					State = 456; singleExpression(0);
					}
					} 
				}
				State = 461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode In() { return GetToken(ECMAScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		public ITerminalNode This() { return GetToken(ECMAScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		public ITerminalNode Function() { return GetToken(ECMAScriptParser.Function, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		public ITerminalNode Typeof() { return GetToken(ECMAScriptParser.Typeof, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Instanceof() { return GetToken(ECMAScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		public ITerminalNode Delete() { return GetToken(ECMAScriptParser.Delete, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		public ITerminalNode New() { return GetToken(ECMAScriptParser.New, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		public ITerminalNode Void() { return GetToken(ECMAScriptParser.Void, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			switch (TokenStream.La(1)) {
			case Delete:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 463; Match(Delete);
				State = 464; singleExpression(30);
				}
				break;
			case Void:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 465; Match(Void);
				State = 466; singleExpression(29);
				}
				break;
			case Typeof:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 467; Match(Typeof);
				State = 468; singleExpression(28);
				}
				break;
			case PlusPlus:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 469; Match(PlusPlus);
				State = 470; singleExpression(27);
				}
				break;
			case MinusMinus:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 471; Match(MinusMinus);
				State = 472; singleExpression(26);
				}
				break;
			case Plus:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 473; Match(Plus);
				State = 474; singleExpression(25);
				}
				break;
			case Minus:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 475; Match(Minus);
				State = 476; singleExpression(24);
				}
				break;
			case BitNot:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 477; Match(BitNot);
				State = 478; singleExpression(23);
				}
				break;
			case Not:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 479; Match(Not);
				State = 480; singleExpression(22);
				}
				break;
			case Function:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 481; Match(Function);
				State = 483;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 482; Match(Identifier);
					}
				}

				State = 485; Match(OpenParen);
				State = 487;
				_la = TokenStream.La(1);
				if (_la==Identifier) {
					{
					State = 486; formalParameterList();
					}
				}

				State = 489; Match(CloseParen);
				State = 490; Match(OpenBrace);
				State = 491; functionBody();
				State = 492; Match(CloseBrace);
				}
				break;
			case New:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 494; Match(New);
				State = 495; singleExpression(0);
				State = 497;
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 496; arguments();
					}
					break;
				}
				}
				break;
			case This:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 499; Match(This);
				}
				break;
			case Identifier:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 500; Match(Identifier);
				}
				break;
			case RegularExpressionLiteral:
			case NullLiteral:
			case BooleanLiteral:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case StringLiteral:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 501; literal();
				}
				break;
			case OpenBracket:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 502; arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 503; objectLiteral();
				}
				break;
			case OpenParen:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 504; Match(OpenParen);
				State = 505; expressionSequence();
				State = 506; Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 577;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 575;
					switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 510;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 511;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 512; singleExpression(22);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 513;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 514;
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 515; singleExpression(21);
						}
						break;
					case 3:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 516;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 517;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 518; singleExpression(20);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 519;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 520;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 521; singleExpression(19);
						}
						break;
					case 5:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 522;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 523; Match(Instanceof);
						State = 524; singleExpression(18);
						}
						break;
					case 6:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 525;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 526; Match(In);
						State = 527; singleExpression(17);
						}
						break;
					case 7:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 528;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 529;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 530; singleExpression(16);
						}
						break;
					case 8:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 531;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 532; Match(BitAnd);
						State = 533; singleExpression(15);
						}
						break;
					case 9:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 534;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 535; Match(BitXOr);
						State = 536; singleExpression(14);
						}
						break;
					case 10:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 537;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 538; Match(BitOr);
						State = 539; singleExpression(13);
						}
						break;
					case 11:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 540;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 541; Match(And);
						State = 542; singleExpression(12);
						}
						break;
					case 12:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 543;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 544; Match(Or);
						State = 545; singleExpression(11);
						}
						break;
					case 13:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 546;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 547; Match(QuestionMark);
						State = 548; singleExpression(0);
						State = 549; Match(Colon);
						State = 550; singleExpression(10);
						}
						break;
					case 14:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 552;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 553; Match(OpenBracket);
						State = 554; expressionSequence();
						State = 555; Match(CloseBracket);
						}
						break;
					case 15:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 557;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 558; Match(Dot);
						State = 559; identifierName();
						}
						break;
					case 16:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 560;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 561; arguments();
						}
						break;
					case 17:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 562;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 563;
						if (!(!here(LineTerminator))) throw new FailedPredicateException(this, "!here(LineTerminator)");
						State = 564; Match(PlusPlus);
						}
						break;
					case 18:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 565;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 566;
						if (!(!here(LineTerminator))) throw new FailedPredicateException(this, "!here(LineTerminator)");
						State = 567; Match(MinusMinus);
						}
						break;
					case 19:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 568;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 569; Match(Assign);
						State = 570; expressionSequence();
						}
						break;
					case 20:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 571;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 572; assignmentOperator();
						State = 573; expressionSequence();
						}
						break;
					}
					} 
				}
				State = 579;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NullLiteral() { return GetToken(ECMAScriptParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(ECMAScriptParser.BooleanLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(ECMAScriptParser.StringLiteral, 0); }
		public ITerminalNode RegularExpressionLiteral() { return GetToken(ECMAScriptParser.RegularExpressionLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_literal);
		int _la;
		try {
			State = 584;
			switch (TokenStream.La(1)) {
			case RegularExpressionLiteral:
			case NullLiteral:
			case BooleanLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << NullLiteral) | (1L << BooleanLiteral))) != 0) || _la==StringLiteral) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(ECMAScriptParser.DecimalLiteral, 0); }
		public ITerminalNode HexIntegerLiteral() { return GetToken(ECMAScriptParser.HexIntegerLiteral, 0); }
		public ITerminalNode OctalIntegerLiteral() { return GetToken(ECMAScriptParser.OctalIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 94, RULE_identifierName);
		try {
			State = 590;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 588; Match(Identifier);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
				EnterOuterAlt(_localctx, 2);
				{
				State = 589; reservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public FutureReservedWordContext futureReservedWord() {
			return GetRuleContext<FutureReservedWordContext>(0);
		}
		public ITerminalNode NullLiteral() { return GetToken(ECMAScriptParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(ECMAScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 96, RULE_reservedWord);
		int _la;
		try {
			State = 595;
			switch (TokenStream.La(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592; keyword();
				}
				break;
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; futureReservedWord();
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 594;
				_la = TokenStream.La(1);
				if ( !(_la==NullLiteral || _la==BooleanLiteral) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(ECMAScriptParser.Break, 0); }
		public ITerminalNode Do() { return GetToken(ECMAScriptParser.Do, 0); }
		public ITerminalNode Instanceof() { return GetToken(ECMAScriptParser.Instanceof, 0); }
		public ITerminalNode Typeof() { return GetToken(ECMAScriptParser.Typeof, 0); }
		public ITerminalNode Case() { return GetToken(ECMAScriptParser.Case, 0); }
		public ITerminalNode Else() { return GetToken(ECMAScriptParser.Else, 0); }
		public ITerminalNode New() { return GetToken(ECMAScriptParser.New, 0); }
		public ITerminalNode Var() { return GetToken(ECMAScriptParser.Var, 0); }
		public ITerminalNode Catch() { return GetToken(ECMAScriptParser.Catch, 0); }
		public ITerminalNode Finally() { return GetToken(ECMAScriptParser.Finally, 0); }
		public ITerminalNode Return() { return GetToken(ECMAScriptParser.Return, 0); }
		public ITerminalNode Void() { return GetToken(ECMAScriptParser.Void, 0); }
		public ITerminalNode Continue() { return GetToken(ECMAScriptParser.Continue, 0); }
		public ITerminalNode For() { return GetToken(ECMAScriptParser.For, 0); }
		public ITerminalNode Switch() { return GetToken(ECMAScriptParser.Switch, 0); }
		public ITerminalNode While() { return GetToken(ECMAScriptParser.While, 0); }
		public ITerminalNode Debugger() { return GetToken(ECMAScriptParser.Debugger, 0); }
		public ITerminalNode Function() { return GetToken(ECMAScriptParser.Function, 0); }
		public ITerminalNode This() { return GetToken(ECMAScriptParser.This, 0); }
		public ITerminalNode With() { return GetToken(ECMAScriptParser.With, 0); }
		public ITerminalNode Default() { return GetToken(ECMAScriptParser.Default, 0); }
		public ITerminalNode If() { return GetToken(ECMAScriptParser.If, 0); }
		public ITerminalNode Throw() { return GetToken(ECMAScriptParser.Throw, 0); }
		public ITerminalNode Delete() { return GetToken(ECMAScriptParser.Delete, 0); }
		public ITerminalNode In() { return GetToken(ECMAScriptParser.In, 0); }
		public ITerminalNode Try() { return GetToken(ECMAScriptParser.Try, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 98, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			_la = TokenStream.La(1);
			if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (Break - 56)) | (1L << (Do - 56)) | (1L << (Instanceof - 56)) | (1L << (Typeof - 56)) | (1L << (Case - 56)) | (1L << (Else - 56)) | (1L << (New - 56)) | (1L << (Var - 56)) | (1L << (Catch - 56)) | (1L << (Finally - 56)) | (1L << (Return - 56)) | (1L << (Void - 56)) | (1L << (Continue - 56)) | (1L << (For - 56)) | (1L << (Switch - 56)) | (1L << (While - 56)) | (1L << (Debugger - 56)) | (1L << (Function - 56)) | (1L << (This - 56)) | (1L << (With - 56)) | (1L << (Default - 56)) | (1L << (If - 56)) | (1L << (Throw - 56)) | (1L << (Delete - 56)) | (1L << (In - 56)) | (1L << (Try - 56)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FutureReservedWordContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(ECMAScriptParser.Class, 0); }
		public ITerminalNode Enum() { return GetToken(ECMAScriptParser.Enum, 0); }
		public ITerminalNode Extends() { return GetToken(ECMAScriptParser.Extends, 0); }
		public ITerminalNode Super() { return GetToken(ECMAScriptParser.Super, 0); }
		public ITerminalNode Const() { return GetToken(ECMAScriptParser.Const, 0); }
		public ITerminalNode Export() { return GetToken(ECMAScriptParser.Export, 0); }
		public ITerminalNode Import() { return GetToken(ECMAScriptParser.Import, 0); }
		public ITerminalNode Implements() { return GetToken(ECMAScriptParser.Implements, 0); }
		public ITerminalNode Let() { return GetToken(ECMAScriptParser.Let, 0); }
		public ITerminalNode Private() { return GetToken(ECMAScriptParser.Private, 0); }
		public ITerminalNode Public() { return GetToken(ECMAScriptParser.Public, 0); }
		public ITerminalNode Interface() { return GetToken(ECMAScriptParser.Interface, 0); }
		public ITerminalNode Package() { return GetToken(ECMAScriptParser.Package, 0); }
		public ITerminalNode Protected() { return GetToken(ECMAScriptParser.Protected, 0); }
		public ITerminalNode Static() { return GetToken(ECMAScriptParser.Static, 0); }
		public ITerminalNode Yield() { return GetToken(ECMAScriptParser.Yield, 0); }
		public FutureReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_futureReservedWord; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterFutureReservedWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitFutureReservedWord(this);
		}
	}

	[RuleVersion(0)]
	public FutureReservedWordContext futureReservedWord() {
		FutureReservedWordContext _localctx = new FutureReservedWordContext(Context, State);
		EnterRule(_localctx, 100, RULE_futureReservedWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			_la = TokenStream.La(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (Class - 82)) | (1L << (Enum - 82)) | (1L << (Extends - 82)) | (1L << (Super - 82)) | (1L << (Const - 82)) | (1L << (Export - 82)) | (1L << (Import - 82)) | (1L << (Implements - 82)) | (1L << (Let - 82)) | (1L << (Private - 82)) | (1L << (Public - 82)) | (1L << (Interface - 82)) | (1L << (Package - 82)) | (1L << (Protected - 82)) | (1L << (Static - 82)) | (1L << (Yield - 82)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 102, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			if (!(_input.Lt(1).Text.Equals("get"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"get\")");
			State = 602; Match(Identifier);
			State = 603; propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ECMAScriptParser.Identifier, 0); }
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 104, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			if (!(_input.Lt(1).Text.Equals("set"))) throw new FailedPredicateException(this, "_input.Lt(1).Text.Equals(\"set\")");
			State = 606; Match(Identifier);
			State = 607; propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(ECMAScriptParser.SemiColon, 0); }
		public ITerminalNode Eof() { return GetToken(ECMAScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 106, RULE_eos);
		try {
			State = 613;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609; Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610; Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 611;
				if (!(lineTerminatorAhead())) throw new FailedPredicateException(this, "lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 612;
				if (!(_input.Lt(1).Type == CloseBrace)) throw new FailedPredicateException(this, "_input.Lt(1).Type == CloseBrace");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EofContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ECMAScriptParser.Eof, 0); }
		public EofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.EnterEof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IECMAScriptListener typedListener = listener as IECMAScriptListener;
			if (typedListener != null) typedListener.ExitEof(this);
		}
	}

	[RuleVersion(0)]
	public EofContext eof() {
		EofContext _localctx = new EofContext(Context, State);
		EnterRule(_localctx, 108, RULE_eof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 43: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 51: return getter_sempred((GetterContext)_localctx, predIndex);
		case 52: return setter_sempred((SetterContext)_localctx, predIndex);
		case 53: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_input.La(1) != OpenBrace) && (_input.La(1) != Function);
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 21);
		case 2: return Precpred(Context, 20);
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 16);
		case 7: return Precpred(Context, 15);
		case 8: return Precpred(Context, 14);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 11);
		case 12: return Precpred(Context, 10);
		case 13: return Precpred(Context, 9);
		case 14: return Precpred(Context, 36);
		case 15: return Precpred(Context, 35);
		case 16: return Precpred(Context, 34);
		case 17: return Precpred(Context, 32);
		case 18: return !here(LineTerminator);
		case 19: return Precpred(Context, 31);
		case 20: return !here(LineTerminator);
		case 21: return Precpred(Context, 8);
		case 22: return Precpred(Context, 7);
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return _input.Lt(1).Text.Equals("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return _input.Lt(1).Text.Equals("set");
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return lineTerminatorAhead();
		case 26: return _input.Lt(1).Type == CloseBrace;
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3i\x26C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x3\x2\x5\x2r\n\x2\x3\x2\x3\x2\x3\x3\x6\x3w\n\x3\r\x3\xE"+
		"\x3x\x3\x4\x3\x4\x5\x4}\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x8E\n\x5\x3\x6"+
		"\x3\x6\x5\x6\x92\n\x6\x3\x6\x3\x6\x3\a\x6\a\x97\n\a\r\a\xE\a\x98\x3\b"+
		"\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\a\t\xA2\n\t\f\t\xE\t\xA5\v\t\x3\n\x3\n"+
		"\x5\n\xA9\n\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xBB\n\xE\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\xCE\n\xF\x3\xF\x3\xF\x5\xF\xD2\n\xF\x3\xF\x3\xF\x5\xF"+
		"\xD6\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xE0\n"+
		"\xF\x3\xF\x3\xF\x5\xF\xE4\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF\xFA\n\xF\x3\x10\x3\x10\x5\x10\xFE\n\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x5\x11\x104\n\x11\x3\x11\x3\x11\x3\x12\x3\x12\x5\x12\x10A"+
		"\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x5\x15\x11C\n\x15\x3"+
		"\x15\x3\x15\x5\x15\x120\n\x15\x5\x15\x122\n\x15\x3\x15\x3\x15\x3\x16\x6"+
		"\x16\x127\n\x16\r\x16\xE\x16\x128\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x12F"+
		"\n\x17\x3\x18\x3\x18\x3\x18\x5\x18\x134\n\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x14B\n\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x15D\n\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \a \x167\n \f \xE \x16A\v \x3!\x5"+
		"!\x16D\n!\x3\"\x3\"\x5\"\x171\n\"\x3\"\x5\"\x174\n\"\x3\"\x5\"\x177\n"+
		"\"\x3\"\x3\"\x3#\x5#\x17C\n#\x3#\x3#\x3#\x5#\x181\n#\x3#\a#\x184\n#\f"+
		"#\xE#\x187\v#\x3$\x6$\x18A\n$\r$\xE$\x18B\x3%\x3%\x5%\x190\n%\x3%\x5%"+
		"\x193\n%\x3%\x3%\x3&\x3&\x3&\a&\x19A\n&\f&\xE&\x19D\v&\x3\'\x3\'\x3\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'"+
		"\x3\'\x3\'\x5\'\x1B2\n\'\x3(\x3(\x3(\x5(\x1B7\n(\x3)\x3)\x3*\x3*\x5*\x1BD"+
		"\n*\x3*\x3*\x3+\x3+\x3+\a+\x1C4\n+\f+\xE+\x1C7\v+\x3,\x3,\x3,\a,\x1CC"+
		"\n,\f,\xE,\x1CF\v,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x1E6\n-\x3-\x3-\x5-\x1EA\n-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x1F4\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x5-\x1FF\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\a"+
		"-\x242\n-\f-\xE-\x245\v-\x3.\x3.\x3/\x3/\x5/\x24B\n/\x3\x30\x3\x30\x3"+
		"\x31\x3\x31\x5\x31\x251\n\x31\x3\x32\x3\x32\x3\x32\x5\x32\x256\n\x32\x3"+
		"\x33\x3\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x268\n\x37\x3\x38\x3\x38"+
		"\x3\x38\x2\x3X\x39\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E "+
		"\"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66"+
		"hjln\x2\r\x3\x2\x17\x19\x3\x2\x13\x14\x3\x2\x1A\x1C\x3\x2\x1D \x3\x2!"+
		"$\x3\x2*\x34\x5\x2\x3\x3\x35\x36\x65\x65\x3\x2\x37\x39\x3\x2\x35\x36\x3"+
		"\x2:S\x3\x2T\x63\x2A1\x2q\x3\x2\x2\x2\x4v\x3\x2\x2\x2\x6|\x3\x2\x2\x2"+
		"\b\x8D\x3\x2\x2\x2\n\x8F\x3\x2\x2\x2\f\x96\x3\x2\x2\x2\xE\x9A\x3\x2\x2"+
		"\x2\x10\x9E\x3\x2\x2\x2\x12\xA6\x3\x2\x2\x2\x14\xAA\x3\x2\x2\x2\x16\xAD"+
		"\x3\x2\x2\x2\x18\xAF\x3\x2\x2\x2\x1A\xB3\x3\x2\x2\x2\x1C\xF9\x3\x2\x2"+
		"\x2\x1E\xFB\x3\x2\x2\x2 \x101\x3\x2\x2\x2\"\x107\x3\x2\x2\x2$\x10D\x3"+
		"\x2\x2\x2&\x113\x3\x2\x2\x2(\x119\x3\x2\x2\x2*\x126\x3\x2\x2\x2,\x12A"+
		"\x3\x2\x2\x2.\x130\x3\x2\x2\x2\x30\x135\x3\x2\x2\x2\x32\x139\x3\x2\x2"+
		"\x2\x34\x14A\x3\x2\x2\x2\x36\x14C\x3\x2\x2\x2\x38\x152\x3\x2\x2\x2:\x155"+
		"\x3\x2\x2\x2<\x158\x3\x2\x2\x2>\x163\x3\x2\x2\x2@\x16C\x3\x2\x2\x2\x42"+
		"\x16E\x3\x2\x2\x2\x44\x17B\x3\x2\x2\x2\x46\x189\x3\x2\x2\x2H\x18D\x3\x2"+
		"\x2\x2J\x196\x3\x2\x2\x2L\x1B1\x3\x2\x2\x2N\x1B6\x3\x2\x2\x2P\x1B8\x3"+
		"\x2\x2\x2R\x1BA\x3\x2\x2\x2T\x1C0\x3\x2\x2\x2V\x1C8\x3\x2\x2\x2X\x1FE"+
		"\x3\x2\x2\x2Z\x246\x3\x2\x2\x2\\\x24A\x3\x2\x2\x2^\x24C\x3\x2\x2\x2`\x250"+
		"\x3\x2\x2\x2\x62\x255\x3\x2\x2\x2\x64\x257\x3\x2\x2\x2\x66\x259\x3\x2"+
		"\x2\x2h\x25B\x3\x2\x2\x2j\x25F\x3\x2\x2\x2l\x267\x3\x2\x2\x2n\x269\x3"+
		"\x2\x2\x2pr\x5\x4\x3\x2qp\x3\x2\x2\x2qr\x3\x2\x2\x2rs\x3\x2\x2\x2st\a"+
		"\x2\x2\x3t\x3\x3\x2\x2\x2uw\x5\x6\x4\x2vu\x3\x2\x2\x2wx\x3\x2\x2\x2xv"+
		"\x3\x2\x2\x2xy\x3\x2\x2\x2y\x5\x3\x2\x2\x2z}\x5\b\x5\x2{}\x5<\x1F\x2|"+
		"z\x3\x2\x2\x2|{\x3\x2\x2\x2}\a\x3\x2\x2\x2~\x8E\x5\n\x6\x2\x7F\x8E\x5"+
		"\xE\b\x2\x80\x8E\x5\x16\f\x2\x81\x8E\x5\x18\r\x2\x82\x8E\x5\x1A\xE\x2"+
		"\x83\x8E\x5\x1C\xF\x2\x84\x8E\x5\x1E\x10\x2\x85\x8E\x5 \x11\x2\x86\x8E"+
		"\x5\"\x12\x2\x87\x8E\x5$\x13\x2\x88\x8E\x5\x30\x19\x2\x89\x8E\x5&\x14"+
		"\x2\x8A\x8E\x5\x32\x1A\x2\x8B\x8E\x5\x34\x1B\x2\x8C\x8E\x5:\x1E\x2\x8D"+
		"~\x3\x2\x2\x2\x8D\x7F\x3\x2\x2\x2\x8D\x80\x3\x2\x2\x2\x8D\x81\x3\x2\x2"+
		"\x2\x8D\x82\x3\x2\x2\x2\x8D\x83\x3\x2\x2\x2\x8D\x84\x3\x2\x2\x2\x8D\x85"+
		"\x3\x2\x2\x2\x8D\x86\x3\x2\x2\x2\x8D\x87\x3\x2\x2\x2\x8D\x88\x3\x2\x2"+
		"\x2\x8D\x89\x3\x2\x2\x2\x8D\x8A\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8C"+
		"\x3\x2\x2\x2\x8E\t\x3\x2\x2\x2\x8F\x91\a\t\x2\x2\x90\x92\x5\f\a\x2\x91"+
		"\x90\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x94\a\n\x2"+
		"\x2\x94\v\x3\x2\x2\x2\x95\x97\x5\b\x5\x2\x96\x95\x3\x2\x2\x2\x97\x98\x3"+
		"\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\r\x3\x2\x2\x2\x9A"+
		"\x9B\a\x41\x2\x2\x9B\x9C\x5\x10\t\x2\x9C\x9D\x5l\x37\x2\x9D\xF\x3\x2\x2"+
		"\x2\x9E\xA3\x5\x12\n\x2\x9F\xA0\a\f\x2\x2\xA0\xA2\x5\x12\n\x2\xA1\x9F"+
		"\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2"+
		"\x2\xA4\x11\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6\xA8\a\x64\x2\x2\xA7\xA9"+
		"\x5\x14\v\x2\xA8\xA7\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\x13\x3\x2\x2"+
		"\x2\xAA\xAB\a\r\x2\x2\xAB\xAC\x5X-\x2\xAC\x15\x3\x2\x2\x2\xAD\xAE\a\v"+
		"\x2\x2\xAE\x17\x3\x2\x2\x2\xAF\xB0\x6\r\x2\x2\xB0\xB1\x5V,\x2\xB1\xB2"+
		"\x5l\x37\x2\xB2\x19\x3\x2\x2\x2\xB3\xB4\aO\x2\x2\xB4\xB5\a\a\x2\x2\xB5"+
		"\xB6\x5V,\x2\xB6\xB7\a\b\x2\x2\xB7\xBA\x5\b\x5\x2\xB8\xB9\a?\x2\x2\xB9"+
		"\xBB\x5\b\x5\x2\xBA\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\x1B\x3\x2"+
		"\x2\x2\xBC\xBD\a;\x2\x2\xBD\xBE\x5\b\x5\x2\xBE\xBF\aI\x2\x2\xBF\xC0\a"+
		"\a\x2\x2\xC0\xC1\x5V,\x2\xC1\xC2\a\b\x2\x2\xC2\xC3\x5l\x37\x2\xC3\xFA"+
		"\x3\x2\x2\x2\xC4\xC5\aI\x2\x2\xC5\xC6\a\a\x2\x2\xC6\xC7\x5V,\x2\xC7\xC8"+
		"\a\b\x2\x2\xC8\xC9\x5\b\x5\x2\xC9\xFA\x3\x2\x2\x2\xCA\xCB\aG\x2\x2\xCB"+
		"\xCD\a\a\x2\x2\xCC\xCE\x5V,\x2\xCD\xCC\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2"+
		"\xCE\xCF\x3\x2\x2\x2\xCF\xD1\a\v\x2\x2\xD0\xD2\x5V,\x2\xD1\xD0\x3\x2\x2"+
		"\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD5\a\v\x2\x2\xD4\xD6"+
		"\x5V,\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7"+
		"\xD8\a\b\x2\x2\xD8\xFA\x5\b\x5\x2\xD9\xDA\aG\x2\x2\xDA\xDB\a\a\x2\x2\xDB"+
		"\xDC\a\x41\x2\x2\xDC\xDD\x5\x10\t\x2\xDD\xDF\a\v\x2\x2\xDE\xE0\x5V,\x2"+
		"\xDF\xDE\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE3\a"+
		"\v\x2\x2\xE2\xE4\x5V,\x2\xE3\xE2\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5"+
		"\x3\x2\x2\x2\xE5\xE6\a\b\x2\x2\xE6\xE7\x5\b\x5\x2\xE7\xFA\x3\x2\x2\x2"+
		"\xE8\xE9\aG\x2\x2\xE9\xEA\a\a\x2\x2\xEA\xEB\x5X-\x2\xEB\xEC\aR\x2\x2\xEC"+
		"\xED\x5V,\x2\xED\xEE\a\b\x2\x2\xEE\xEF\x5\b\x5\x2\xEF\xFA\x3\x2\x2\x2"+
		"\xF0\xF1\aG\x2\x2\xF1\xF2\a\a\x2\x2\xF2\xF3\a\x41\x2\x2\xF3\xF4\x5\x12"+
		"\n\x2\xF4\xF5\aR\x2\x2\xF5\xF6\x5V,\x2\xF6\xF7\a\b\x2\x2\xF7\xF8\x5\b"+
		"\x5\x2\xF8\xFA\x3\x2\x2\x2\xF9\xBC\x3\x2\x2\x2\xF9\xC4\x3\x2\x2\x2\xF9"+
		"\xCA\x3\x2\x2\x2\xF9\xD9\x3\x2\x2\x2\xF9\xE8\x3\x2\x2\x2\xF9\xF0\x3\x2"+
		"\x2\x2\xFA\x1D\x3\x2\x2\x2\xFB\xFD\a\x46\x2\x2\xFC\xFE\a\x64\x2\x2\xFD"+
		"\xFC\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\x5l"+
		"\x37\x2\x100\x1F\x3\x2\x2\x2\x101\x103\a:\x2\x2\x102\x104\a\x64\x2\x2"+
		"\x103\x102\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105"+
		"\x106\x5l\x37\x2\x106!\x3\x2\x2\x2\x107\x109\a\x44\x2\x2\x108\x10A\x5"+
		"V,\x2\x109\x108\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2"+
		"\x10B\x10C\x5l\x37\x2\x10C#\x3\x2\x2\x2\x10D\x10E\aM\x2\x2\x10E\x10F\a"+
		"\a\x2\x2\x10F\x110\x5V,\x2\x110\x111\a\b\x2\x2\x111\x112\x5\b\x5\x2\x112"+
		"%\x3\x2\x2\x2\x113\x114\aH\x2\x2\x114\x115\a\a\x2\x2\x115\x116\x5V,\x2"+
		"\x116\x117\a\b\x2\x2\x117\x118\x5(\x15\x2\x118\'\x3\x2\x2\x2\x119\x11B"+
		"\a\t\x2\x2\x11A\x11C\x5*\x16\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2"+
		"\x2\x2\x11C\x121\x3\x2\x2\x2\x11D\x11F\x5.\x18\x2\x11E\x120\x5*\x16\x2"+
		"\x11F\x11E\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x3\x2\x2\x2\x121"+
		"\x11D\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124"+
		"\a\n\x2\x2\x124)\x3\x2\x2\x2\x125\x127\x5,\x17\x2\x126\x125\x3\x2\x2\x2"+
		"\x127\x128\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129"+
		"+\x3\x2\x2\x2\x12A\x12B\a>\x2\x2\x12B\x12C\x5V,\x2\x12C\x12E\a\xF\x2\x2"+
		"\x12D\x12F\x5\f\a\x2\x12E\x12D\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F"+
		"-\x3\x2\x2\x2\x130\x131\aN\x2\x2\x131\x133\a\xF\x2\x2\x132\x134\x5\f\a"+
		"\x2\x133\x132\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134/\x3\x2\x2\x2\x135"+
		"\x136\a\x64\x2\x2\x136\x137\a\xF\x2\x2\x137\x138\x5\b\x5\x2\x138\x31\x3"+
		"\x2\x2\x2\x139\x13A\aP\x2\x2\x13A\x13B\x5V,\x2\x13B\x13C\x5l\x37\x2\x13C"+
		"\x33\x3\x2\x2\x2\x13D\x13E\aS\x2\x2\x13E\x13F\x5\n\x6\x2\x13F\x140\x5"+
		"\x36\x1C\x2\x140\x14B\x3\x2\x2\x2\x141\x142\aS\x2\x2\x142\x143\x5\n\x6"+
		"\x2\x143\x144\x5\x38\x1D\x2\x144\x14B\x3\x2\x2\x2\x145\x146\aS\x2\x2\x146"+
		"\x147\x5\n\x6\x2\x147\x148\x5\x36\x1C\x2\x148\x149\x5\x38\x1D\x2\x149"+
		"\x14B\x3\x2\x2\x2\x14A\x13D\x3\x2\x2\x2\x14A\x141\x3\x2\x2\x2\x14A\x145"+
		"\x3\x2\x2\x2\x14B\x35\x3\x2\x2\x2\x14C\x14D\a\x42\x2\x2\x14D\x14E\a\a"+
		"\x2\x2\x14E\x14F\a\x64\x2\x2\x14F\x150\a\b\x2\x2\x150\x151\x5\n\x6\x2"+
		"\x151\x37\x3\x2\x2\x2\x152\x153\a\x43\x2\x2\x153\x154\x5\n\x6\x2\x154"+
		"\x39\x3\x2\x2\x2\x155\x156\aJ\x2\x2\x156\x157\x5l\x37\x2\x157;\x3\x2\x2"+
		"\x2\x158\x159\aK\x2\x2\x159\x15A\a\x64\x2\x2\x15A\x15C\a\a\x2\x2\x15B"+
		"\x15D\x5> \x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x3"+
		"\x2\x2\x2\x15E\x15F\a\b\x2\x2\x15F\x160\a\t\x2\x2\x160\x161\x5@!\x2\x161"+
		"\x162\a\n\x2\x2\x162=\x3\x2\x2\x2\x163\x168\a\x64\x2\x2\x164\x165\a\f"+
		"\x2\x2\x165\x167\a\x64\x2\x2\x166\x164\x3\x2\x2\x2\x167\x16A\x3\x2\x2"+
		"\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169?\x3\x2\x2\x2\x16A"+
		"\x168\x3\x2\x2\x2\x16B\x16D\x5\x4\x3\x2\x16C\x16B\x3\x2\x2\x2\x16C\x16D"+
		"\x3\x2\x2\x2\x16D\x41\x3\x2\x2\x2\x16E\x170\a\x5\x2\x2\x16F\x171\x5\x44"+
		"#\x2\x170\x16F\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x173\x3\x2\x2\x2"+
		"\x172\x174\a\f\x2\x2\x173\x172\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174"+
		"\x176\x3\x2\x2\x2\x175\x177\x5\x46$\x2\x176\x175\x3\x2\x2\x2\x176\x177"+
		"\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179\a\x6\x2\x2\x179\x43\x3\x2"+
		"\x2\x2\x17A\x17C\x5\x46$\x2\x17B\x17A\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2"+
		"\x17C\x17D\x3\x2\x2\x2\x17D\x185\x5X-\x2\x17E\x180\a\f\x2\x2\x17F\x181"+
		"\x5\x46$\x2\x180\x17F\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x182\x3\x2"+
		"\x2\x2\x182\x184\x5X-\x2\x183\x17E\x3\x2\x2\x2\x184\x187\x3\x2\x2\x2\x185"+
		"\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x45\x3\x2\x2\x2\x187\x185"+
		"\x3\x2\x2\x2\x188\x18A\a\f\x2\x2\x189\x188\x3\x2\x2\x2\x18A\x18B\x3\x2"+
		"\x2\x2\x18B\x189\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18CG\x3\x2\x2\x2\x18D"+
		"\x18F\a\t\x2\x2\x18E\x190\x5J&\x2\x18F\x18E\x3\x2\x2\x2\x18F\x190\x3\x2"+
		"\x2\x2\x190\x192\x3\x2\x2\x2\x191\x193\a\f\x2\x2\x192\x191\x3\x2\x2\x2"+
		"\x192\x193\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x195\a\n\x2\x2\x195"+
		"I\x3\x2\x2\x2\x196\x19B\x5L\'\x2\x197\x198\a\f\x2\x2\x198\x19A\x5L\'\x2"+
		"\x199\x197\x3\x2\x2\x2\x19A\x19D\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19B"+
		"\x19C\x3\x2\x2\x2\x19CK\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19E\x19F\x5"+
		"N(\x2\x19F\x1A0\a\xF\x2\x2\x1A0\x1A1\x5X-\x2\x1A1\x1B2\x3\x2\x2\x2\x1A2"+
		"\x1A3\x5h\x35\x2\x1A3\x1A4\a\a\x2\x2\x1A4\x1A5\a\b\x2\x2\x1A5\x1A6\a\t"+
		"\x2\x2\x1A6\x1A7\x5@!\x2\x1A7\x1A8\a\n\x2\x2\x1A8\x1B2\x3\x2\x2\x2\x1A9"+
		"\x1AA\x5j\x36\x2\x1AA\x1AB\a\a\x2\x2\x1AB\x1AC\x5P)\x2\x1AC\x1AD\a\b\x2"+
		"\x2\x1AD\x1AE\a\t\x2\x2\x1AE\x1AF\x5@!\x2\x1AF\x1B0\a\n\x2\x2\x1B0\x1B2"+
		"\x3\x2\x2\x2\x1B1\x19E\x3\x2\x2\x2\x1B1\x1A2\x3\x2\x2\x2\x1B1\x1A9\x3"+
		"\x2\x2\x2\x1B2M\x3\x2\x2\x2\x1B3\x1B7\x5`\x31\x2\x1B4\x1B7\a\x65\x2\x2"+
		"\x1B5\x1B7\x5^\x30\x2\x1B6\x1B3\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B6"+
		"\x1B5\x3\x2\x2\x2\x1B7O\x3\x2\x2\x2\x1B8\x1B9\a\x64\x2\x2\x1B9Q\x3\x2"+
		"\x2\x2\x1BA\x1BC\a\a\x2\x2\x1BB\x1BD\x5T+\x2\x1BC\x1BB\x3\x2\x2\x2\x1BC"+
		"\x1BD\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BF\a\b\x2\x2\x1BFS\x3\x2"+
		"\x2\x2\x1C0\x1C5\x5X-\x2\x1C1\x1C2\a\f\x2\x2\x1C2\x1C4\x5X-\x2\x1C3\x1C1"+
		"\x3\x2\x2\x2\x1C4\x1C7\x3\x2\x2\x2\x1C5\x1C3\x3\x2\x2\x2\x1C5\x1C6\x3"+
		"\x2\x2\x2\x1C6U\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C8\x1CD\x5X-\x2\x1C9"+
		"\x1CA\a\f\x2\x2\x1CA\x1CC\x5X-\x2\x1CB\x1C9\x3\x2\x2\x2\x1CC\x1CF\x3\x2"+
		"\x2\x2\x1CD\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CEW\x3\x2\x2\x2\x1CF"+
		"\x1CD\x3\x2\x2\x2\x1D0\x1D1\b-\x1\x2\x1D1\x1D2\aQ\x2\x2\x1D2\x1FF\x5X"+
		"- \x1D3\x1D4\a\x45\x2\x2\x1D4\x1FF\x5X-\x1F\x1D5\x1D6\a=\x2\x2\x1D6\x1FF"+
		"\x5X-\x1E\x1D7\x1D8\a\x11\x2\x2\x1D8\x1FF\x5X-\x1D\x1D9\x1DA\a\x12\x2"+
		"\x2\x1DA\x1FF\x5X-\x1C\x1DB\x1DC\a\x13\x2\x2\x1DC\x1FF\x5X-\x1B\x1DD\x1DE"+
		"\a\x14\x2\x2\x1DE\x1FF\x5X-\x1A\x1DF\x1E0\a\x15\x2\x2\x1E0\x1FF\x5X-\x19"+
		"\x1E1\x1E2\a\x16\x2\x2\x1E2\x1FF\x5X-\x18\x1E3\x1E5\aK\x2\x2\x1E4\x1E6"+
		"\a\x64\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7\x3"+
		"\x2\x2\x2\x1E7\x1E9\a\a\x2\x2\x1E8\x1EA\x5> \x2\x1E9\x1E8\x3\x2\x2\x2"+
		"\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EC\a\b\x2\x2\x1EC"+
		"\x1ED\a\t\x2\x2\x1ED\x1EE\x5@!\x2\x1EE\x1EF\a\n\x2\x2\x1EF\x1FF\x3\x2"+
		"\x2\x2\x1F0\x1F1\a@\x2\x2\x1F1\x1F3\x5X-\x2\x1F2\x1F4\x5R*\x2\x1F3\x1F2"+
		"\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1FF\x3\x2\x2\x2\x1F5\x1FF\aL"+
		"\x2\x2\x1F6\x1FF\a\x64\x2\x2\x1F7\x1FF\x5\\/\x2\x1F8\x1FF\x5\x42\"\x2"+
		"\x1F9\x1FF\x5H%\x2\x1FA\x1FB\a\a\x2\x2\x1FB\x1FC\x5V,\x2\x1FC\x1FD\a\b"+
		"\x2\x2\x1FD\x1FF\x3\x2\x2\x2\x1FE\x1D0\x3\x2\x2\x2\x1FE\x1D3\x3\x2\x2"+
		"\x2\x1FE\x1D5\x3\x2\x2\x2\x1FE\x1D7\x3\x2\x2\x2\x1FE\x1D9\x3\x2\x2\x2"+
		"\x1FE\x1DB\x3\x2\x2\x2\x1FE\x1DD\x3\x2\x2\x2\x1FE\x1DF\x3\x2\x2\x2\x1FE"+
		"\x1E1\x3\x2\x2\x2\x1FE\x1E3\x3\x2\x2\x2\x1FE\x1F0\x3\x2\x2\x2\x1FE\x1F5"+
		"\x3\x2\x2\x2\x1FE\x1F6\x3\x2\x2\x2\x1FE\x1F7\x3\x2\x2\x2\x1FE\x1F8\x3"+
		"\x2\x2\x2\x1FE\x1F9\x3\x2\x2\x2\x1FE\x1FA\x3\x2\x2\x2\x1FF\x243\x3\x2"+
		"\x2\x2\x200\x201\f\x17\x2\x2\x201\x202\t\x2\x2\x2\x202\x242\x5X-\x18\x203"+
		"\x204\f\x16\x2\x2\x204\x205\t\x3\x2\x2\x205\x242\x5X-\x17\x206\x207\f"+
		"\x15\x2\x2\x207\x208\t\x4\x2\x2\x208\x242\x5X-\x16\x209\x20A\f\x14\x2"+
		"\x2\x20A\x20B\t\x5\x2\x2\x20B\x242\x5X-\x15\x20C\x20D\f\x13\x2\x2\x20D"+
		"\x20E\a<\x2\x2\x20E\x242\x5X-\x14\x20F\x210\f\x12\x2\x2\x210\x211\aR\x2"+
		"\x2\x211\x242\x5X-\x13\x212\x213\f\x11\x2\x2\x213\x214\t\x6\x2\x2\x214"+
		"\x242\x5X-\x12\x215\x216\f\x10\x2\x2\x216\x217\a%\x2\x2\x217\x242\x5X"+
		"-\x11\x218\x219\f\xF\x2\x2\x219\x21A\a&\x2\x2\x21A\x242\x5X-\x10\x21B"+
		"\x21C\f\xE\x2\x2\x21C\x21D\a\'\x2\x2\x21D\x242\x5X-\xF\x21E\x21F\f\r\x2"+
		"\x2\x21F\x220\a(\x2\x2\x220\x242\x5X-\xE\x221\x222\f\f\x2\x2\x222\x223"+
		"\a)\x2\x2\x223\x242\x5X-\r\x224\x225\f\v\x2\x2\x225\x226\a\xE\x2\x2\x226"+
		"\x227\x5X-\x2\x227\x228\a\xF\x2\x2\x228\x229\x5X-\f\x229\x242\x3\x2\x2"+
		"\x2\x22A\x22B\f&\x2\x2\x22B\x22C\a\x5\x2\x2\x22C\x22D\x5V,\x2\x22D\x22E"+
		"\a\x6\x2\x2\x22E\x242\x3\x2\x2\x2\x22F\x230\f%\x2\x2\x230\x231\a\x10\x2"+
		"\x2\x231\x242\x5`\x31\x2\x232\x233\f$\x2\x2\x233\x242\x5R*\x2\x234\x235"+
		"\f\"\x2\x2\x235\x236\x6-\x14\x2\x236\x242\a\x11\x2\x2\x237\x238\f!\x2"+
		"\x2\x238\x239\x6-\x16\x2\x239\x242\a\x12\x2\x2\x23A\x23B\f\n\x2\x2\x23B"+
		"\x23C\a\r\x2\x2\x23C\x242\x5V,\x2\x23D\x23E\f\t\x2\x2\x23E\x23F\x5Z.\x2"+
		"\x23F\x240\x5V,\x2\x240\x242\x3\x2\x2\x2\x241\x200\x3\x2\x2\x2\x241\x203"+
		"\x3\x2\x2\x2\x241\x206\x3\x2\x2\x2\x241\x209\x3\x2\x2\x2\x241\x20C\x3"+
		"\x2\x2\x2\x241\x20F\x3\x2\x2\x2\x241\x212\x3\x2\x2\x2\x241\x215\x3\x2"+
		"\x2\x2\x241\x218\x3\x2\x2\x2\x241\x21B\x3\x2\x2\x2\x241\x21E\x3\x2\x2"+
		"\x2\x241\x221\x3\x2\x2\x2\x241\x224\x3\x2\x2\x2\x241\x22A\x3\x2\x2\x2"+
		"\x241\x22F\x3\x2\x2\x2\x241\x232\x3\x2\x2\x2\x241\x234\x3\x2\x2\x2\x241"+
		"\x237\x3\x2\x2\x2\x241\x23A\x3\x2\x2\x2\x241\x23D\x3\x2\x2\x2\x242\x245"+
		"\x3\x2\x2\x2\x243\x241\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244Y\x3\x2\x2"+
		"\x2\x245\x243\x3\x2\x2\x2\x246\x247\t\a\x2\x2\x247[\x3\x2\x2\x2\x248\x24B"+
		"\t\b\x2\x2\x249\x24B\x5^\x30\x2\x24A\x248\x3\x2\x2\x2\x24A\x249\x3\x2"+
		"\x2\x2\x24B]\x3\x2\x2\x2\x24C\x24D\t\t\x2\x2\x24D_\x3\x2\x2\x2\x24E\x251"+
		"\a\x64\x2\x2\x24F\x251\x5\x62\x32\x2\x250\x24E\x3\x2\x2\x2\x250\x24F\x3"+
		"\x2\x2\x2\x251\x61\x3\x2\x2\x2\x252\x256\x5\x64\x33\x2\x253\x256\x5\x66"+
		"\x34\x2\x254\x256\t\n\x2\x2\x255\x252\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2"+
		"\x255\x254\x3\x2\x2\x2\x256\x63\x3\x2\x2\x2\x257\x258\t\v\x2\x2\x258\x65"+
		"\x3\x2\x2\x2\x259\x25A\t\f\x2\x2\x25Ag\x3\x2\x2\x2\x25B\x25C\x6\x35\x19"+
		"\x2\x25C\x25D\a\x64\x2\x2\x25D\x25E\x5N(\x2\x25Ei\x3\x2\x2\x2\x25F\x260"+
		"\x6\x36\x1A\x2\x260\x261\a\x64\x2\x2\x261\x262\x5N(\x2\x262k\x3\x2\x2"+
		"\x2\x263\x268\a\v\x2\x2\x264\x268\a\x2\x2\x3\x265\x268\x6\x37\x1B\x2\x266"+
		"\x268\x6\x37\x1C\x2\x267\x263\x3\x2\x2\x2\x267\x264\x3\x2\x2\x2\x267\x265"+
		"\x3\x2\x2\x2\x267\x266\x3\x2\x2\x2\x268m\x3\x2\x2\x2\x269\x26A\a\x2\x2"+
		"\x3\x26Ao\x3\x2\x2\x2\x37qx|\x8D\x91\x98\xA3\xA8\xBA\xCD\xD1\xD5\xDF\xE3"+
		"\xF9\xFD\x103\x109\x11B\x11F\x121\x128\x12E\x133\x14A\x15C\x168\x16C\x170"+
		"\x173\x176\x17B\x180\x185\x18B\x18F\x192\x19B\x1B1\x1B6\x1BC\x1C5\x1CD"+
		"\x1E5\x1E9\x1F3\x1FE\x241\x243\x24A\x250\x255\x267";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
